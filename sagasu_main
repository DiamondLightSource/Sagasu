#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Mar 13 14:48:45 2020
@author: Christian M. Orr
"""

################ SETUP ################

#imports
import os, re
import pickle

plot_kwds = {'alpha' : 0.25, 's' : 80, 'linewidths':0}
os.system("module load mx")
os.system("module load global/cluster")
path = os.getcwd()
print("You are here: "+path)
print("")

print("""
探す探す探す探す探す探す探す探す探す探す探す探す探す探す探
探す .------..------..------..------..------..------. 探す
探す |S.--. ||A.--. ||G.--. ||A.--. ||S.--. ||U.--. | 探す
探す | :/\: || (\/) || :/\: || (\/) || :/\: || (\/) | 探す
探す | :\/: || :\/: || :\/: || :\/: || :\/: || :\/: | 探す
探す | '--'S|| '--'A|| '--'G|| '--'A|| '--'S|| '--'U| 探す
探す `------'`------'`------'`------'`------'`------' 探す
探す探す探す探す探す探す探す探す探す探す探す探す探す探す探
                                      C.ORR 2020


You will need to have run shelxc beforehand. This can be done via hkl2map.

The project name must be exactly the prefix using in hkl2map
eg. for 'proteinA_fa.hkl' use 'proteinA'

The path must be FULL with no / at the end
eg '/dls/here/is/wherethedata/is'

If you only want to run analysis, run from the same place you ran processing 
but leave the questions on project path and cluster blank.
Make sure all of the other inputs are kept the same.

Results will be printed in this console. Graphs will be saved in 
./projectname_results/

      """)

#user inputs
pro_or_ana = (input("Would you like to run processing followed by analysis (p) or just analysis (a)? ")).lower()
print("")
print("***Setup***")
if pro_or_ana == 'p': 
    projname = input("Name of project (SHELX prefix): ") 
    fa_path = input("Path to SHELXC outputs: ")
    lowres = int((1 + (10 * float(input("Low resolution cutoff for grid: ")))))
    l2 = (lowres - 1) / 10
    highres = int((10 * float(input("High resolution cutoff for grid: "))))
    h2 = highres / 10
    lowsites = int(input("Minimum number of sites to search: "))
    highsites = int(input("Maximum number of sites to search: "))
    clust = (str(input("Run on (c)luster or (l)ocal machine? "))).lower()
    ntry = int(input("Number of trials: "))
    hklin = os.path.join(fa_path, projname+"_fa.hkl")
    insin = os.path.join(fa_path, projname+"_fa.ins")
    totalrun = (((lowres - 1) - highres)) * (highsites - lowsites)
    trytot = (totalrun * ntry) 
  
if pro_or_ana == 'a': 
    with open('inps.pkl', 'rb') as f:
        path, projname, lowres, highres, lowsites, highsites, ntry, clusteranalysis = pickle.load(f)
            
clusteranalysis = (str(input("Do you want to run cluster analysis in addition to outlier analysis (time consuming)? (y/n) "))).lower()
if pro_or_ana == 'p':
    print("You have chosen the project name "+projname+" in location "+fa_path)
    print("")
    if clust == 'l':
        print("This will run the grid search on this machine between "+
              str(l2)+"Å and "+str(h2)+"Å. The site range is between "+
              str(lowsites)+" and "+str(highsites)+". As you are running on a local machine, this search may take quite a long time")
    if clust == 'c':       
        print("This will run the grid search on the Diamond cluster between "+
              str(l2)+"Å and "+str(h2)+"Å. The site range is between "+
              str(lowsites)+" and "+str(highsites)+
              ". Please open another terminal to check on the queue status - 'qstat'")
    print("")
    print("Number of shelxd runs: "+str(totalrun))
    print("Grand total number of trys: "+str(trytot))
else:
    print("Running in analysis only mode")
pro = input("Press enter to continue.")
with open('inps.pkl', 'wb') as f:
    pickle.dump([path, projname, lowres, highres, lowsites, highsites, ntry, clusteranalysis], f)        
    
#write shelx job file
    shelxjob = open("shelxd_job.sh","w")
    shelxjob.write("module load shelx\n")
    shelxjob.write("shelxd "+projname+"_fa")
    shelxjob.close()
    os.chmod('shelxd_job.sh', 0o775)
    
 # Read contents from file as a single string. Use RE package to allow for replacement
def replace(file, pattern, subst):
    file_handle = open(file, 'r')
    file_string = file_handle.read()
    file_handle.close()
    file_string = (re.sub(pattern, subst, file_string))
    file_handle = open(file, 'w')
    file_handle.write(file_string)
    file_handle.close()
    
################ PROCESSING ################

#run processing on either cluster or local
statusofrun = "-hold_jid "
if pro_or_ana == 'p': 
    if not os.path.exists(projname):
        os.system("mkdir "+projname)
    i = highres
    while not (i >= lowres):
        os.system("mkdir "+projname+"/"+str(i))
        i2 = (i/10)
        j = highsites
        while not (j <= (lowsites -1)):
            os.system("mkdir "+projname+"/"+str(i)+"/"+str(j))
            os.system("cp "+insin+" ./"+projname+"/"+str(i)+"/"+str(j))
            os.system("cp "+hklin+" ./"+projname+"/"+str(i)+"/"+str(j))
            os.system("cp shelxd_job.sh "+" ./"+projname+"/"+str(i)+"/"+str(j))
            workpath = os.path.join(path, projname+"/"+str(i)+"/"+str(j))
            f = os.path.join(path, projname+"/"+str(i)+"/"+str(j)+"/"+
                             projname+"_fa.ins")
            replace(f, "FIND", "FIND "+str(j)+"\n")
            replace(f, "SHEL", "SHEL 999 "+str(i2)+"\n")
            replace(f, "NTRY", "NTRY "+str(ntry)+"\n")
            statusofrun = statusofrun+"sag_"+str(i)+"_"+str(j)+","
            if clust == 'l':
                print("""
                Running on local machine, this may take some time...
                      """)
                os.system("cd "+workpath+"; ./shelxd_job.sh")
            elif clust == 'c':
                os.system("cd "+workpath+
                          "; qsub -P i23 -q low.q -l h_vmem=4G -N sag_"+
                          str(i)+"_"+str(j)+
                          " -pe smp 40-10 -cwd ./shelxd_job.sh")
            else:
                print("error in input...")
            j = j - 1
        i = i + 1            
    print("""
          
    Done. If nothing happened, make sure you pressed l or c at the cluster question.
     
          """)
    
shelxjob = open("wait.sh","w")
shelxjob.write("module load python/3 \n")
shelxjob.write("/home/i23user/bin/shelxgrid/sagasu_analysis 2>&1 | tee -a sagasu.log")
shelxjob.close()
os.chmod('wait.sh', 0o775)
if pro_or_ana == 'a':
    statusofrun = ''
os.system("qsub "+statusofrun+" -N sagasuanalysis -P i23 -q low.q -l h_vmem=4G -pe smp 20 -cwd ./wait.sh")

os.system("tail -f sagasu.log")
